{
    "docs": [
        {
            "location": "/", 
            "text": "Data Analysis and Reporting with R\n\n\nData analysis is a core skill in many fields of research. \nIn this course, you will learn the fundamentals of analyzing data with R: reading in data, processing it, and performing statistical analyses. \nIn the name of preserving your sanity (and time), we put strong emphasis on organizing your R analyses, as well as generating meaningful reports and visualizations.\nNo prior programming experience necessary. \nVery mild exposure to statistics will be useful, but isn't necessary either.\n\n\nFor simple, interactive lessons on some of the topics we'll cover, see \ntryr.codeschool.com\n\n\nInstructors and Princeton Email: \n\n\n\n\nMichael Chow [machow]\n\n\nNick Rohrbaugh [rohrbaugh]\n\n\n\n\nHow to Use This Course\n\n\nBelieve it or not, everything used to create the pages of this site were done in R.\nThis was done using three tools:\n\n\n\n\nRstudio\n - an interface that makes working with R much easier.\n\n\nRmarkdown\n - a simple way to write a report that can be turned into a web page or pdf.\n\n\nR code\n - the actual R part that does the data analysis\n\n\n\n\nI'll walk you through getting the course materials, but in case you want to try beforehand there are instructions in \nthis clip\n.\n\n\nAsking Questions\n\n\nWe've set up a spot for asking questions on \npiazza (WS 145)\n. \nIf you've never used the site before, \nhere's a brief video on how to sign up and add the course\n.\n\n\nSet Up\n\n\nScreencasts\n\n\nIn case you have trouble with installing R and Rstudio, these screencasts below will walk through the process.\n\n\n\n\nWindows\n\n\nMac\n\n\nLinux (Debian)\n\n\n\n\nInstall R, Rstudio, Rmarkdown\n\n\nGo to \nthis site\n and download R by clicking the link corresponding to your operating system (shown below).\n\n\n\n\nOnce R is installed, \ndownload and install Rstudio\n. \nAt this point, you should be able to open Rstudio, but check the screencasts above if you're not sure how.\nOnce you open Rstudio, it should look something like this the image below.\n\n\n\n\nMake sure it works\n\n\nThe following screenshots will walk you through testing that everything is ready to go. If it's not clear, here is a \nvery short screen cast of the process\n. We'll explain what's happening in more detail during the workshop.\n\n\nCreate an Rmarkdown document, and install the required packages:\n\n\n\n\n\n\n Test generating a report \n\n\n\n\n\n\n Profit \n\n\nWhen your report succesfully generates, you should something similar to the image below. We'll explain what each step of this process means during the course.\n\n\n\n\nFAQ\n\n\nAs we go through the course, we will update this section based on questions that arise.\n\n\n\n\nI'm on Windows 10 and can't open Rstudio\n\nAssuming you've installed Rstudio succesfully, look at \nhow to find apps in Windows 10\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#data-analysis-and-reporting-with-r", 
            "text": "Data analysis is a core skill in many fields of research. \nIn this course, you will learn the fundamentals of analyzing data with R: reading in data, processing it, and performing statistical analyses. \nIn the name of preserving your sanity (and time), we put strong emphasis on organizing your R analyses, as well as generating meaningful reports and visualizations.\nNo prior programming experience necessary. \nVery mild exposure to statistics will be useful, but isn't necessary either.  For simple, interactive lessons on some of the topics we'll cover, see  tryr.codeschool.com  Instructors and Princeton Email:    Michael Chow [machow]  Nick Rohrbaugh [rohrbaugh]", 
            "title": "Data Analysis and Reporting with R"
        }, 
        {
            "location": "/#how-to-use-this-course", 
            "text": "Believe it or not, everything used to create the pages of this site were done in R.\nThis was done using three tools:   Rstudio  - an interface that makes working with R much easier.  Rmarkdown  - a simple way to write a report that can be turned into a web page or pdf.  R code  - the actual R part that does the data analysis   I'll walk you through getting the course materials, but in case you want to try beforehand there are instructions in  this clip .", 
            "title": "How to Use This Course"
        }, 
        {
            "location": "/#asking-questions", 
            "text": "We've set up a spot for asking questions on  piazza (WS 145) . \nIf you've never used the site before,  here's a brief video on how to sign up and add the course .", 
            "title": "Asking Questions"
        }, 
        {
            "location": "/#set-up", 
            "text": "", 
            "title": "Set Up"
        }, 
        {
            "location": "/#screencasts", 
            "text": "In case you have trouble with installing R and Rstudio, these screencasts below will walk through the process.   Windows  Mac  Linux (Debian)", 
            "title": "Screencasts"
        }, 
        {
            "location": "/#install-r-rstudio-rmarkdown", 
            "text": "Go to  this site  and download R by clicking the link corresponding to your operating system (shown below).   Once R is installed,  download and install Rstudio . \nAt this point, you should be able to open Rstudio, but check the screencasts above if you're not sure how.\nOnce you open Rstudio, it should look something like this the image below.", 
            "title": "Install R, Rstudio, Rmarkdown"
        }, 
        {
            "location": "/#make-sure-it-works", 
            "text": "The following screenshots will walk you through testing that everything is ready to go. If it's not clear, here is a  very short screen cast of the process . We'll explain what's happening in more detail during the workshop.  Create an Rmarkdown document, and install the required packages:     Test generating a report      Profit   When your report succesfully generates, you should something similar to the image below. We'll explain what each step of this process means during the course.", 
            "title": "Make sure it works"
        }, 
        {
            "location": "/#faq", 
            "text": "As we go through the course, we will update this section based on questions that arise.   I'm on Windows 10 and can't open Rstudio \nAssuming you've installed Rstudio succesfully, look at  how to find apps in Windows 10 .", 
            "title": "FAQ"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/", 
            "text": "Data Analysis and Reporting with R\n\n\nauthor: Michael Chow and Nick Rohrbaugh\n\n\nslides here\n\n\nAbout us\n\n\nR can do a lot of things\n\n\nThis week\n\n\nMon\n -- Overview of R and making reports in Rmarkdown\n\n\nWed\n -- Basic tools and analyses\n\n\nFri\n -- Broad survey of other things\n\n\nSetup\n\n\n\n\nCreate a folder for R Projects\n\n\nOverview of R and making reports in Rmarkdown\n\n\n\n\nwhat is R?\n\n\nwhat is Rmarkdown?\n\n\nusing Rstudio for great justice.\n\n\n\n\nR in a nutshell\n\n\n 1 + 1\n\n\n\n\n[1] 2\n\n\n\n\n plot(sin(1:100*pi/50), type='l', col='blue')\n\n\n\n\n\n\nMarkdown in a nutshell\n\n\n\n\nWhy combine the two?\n\n\n\n\n\n\n\n\nR + markdown == Rmarkdown\n\n\n\n\n\n\nMaking reports with R is easy!\n\n\n\n\n\n\nCombine R and markdown\n\n\n\n\n\n\n\n\n\n\nR + markdown == Rmarkdown (cont.)\n\n\n\n\n\n\nShow R output in meaningful way\n\n\n\n\n\n\nNo copy / paste madness\n\n\n\n\n\n\nConnect code with end goal\n\n\n\n\n\n\n\n\n\n\nGetting familiar with Rstudio\n\n\nBasic Layout\n\n\n\n\nConsole\n\n\nFiles\n\n\nScripts\n\n\n(Environment)\n\n\n\n\n\n\nConcepts\n\n\n\n\nWorking Directory\n\n\nWorkspace\n\n\nKnitting\n\n\n\n\nResources\n\n\nInteractive: http://tryr.codeschool.com/\n\n\nMore interactive: http://datacamp.com\n\n\nMany links: https://www.rstudio.com/resources/training/online-learning/", 
            "title": "Rstudio"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#data-analysis-and-reporting-with-r", 
            "text": "author: Michael Chow and Nick Rohrbaugh", 
            "title": "Data Analysis and Reporting with R"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#slides-here", 
            "text": "", 
            "title": "slides here"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#about-us", 
            "text": "", 
            "title": "About us"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#r-can-do-a-lot-of-things", 
            "text": "", 
            "title": "R can do a lot of things"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#this-week", 
            "text": "Mon  -- Overview of R and making reports in Rmarkdown  Wed  -- Basic tools and analyses  Fri  -- Broad survey of other things", 
            "title": "This week"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#setup", 
            "text": "Create a folder for R Projects", 
            "title": "Setup"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#overview-of-r-and-making-reports-in-rmarkdown", 
            "text": "what is R?  what is Rmarkdown?  using Rstudio for great justice.", 
            "title": "Overview of R and making reports in Rmarkdown"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#r-in-a-nutshell", 
            "text": "1 + 1  [1] 2   plot(sin(1:100*pi/50), type='l', col='blue')", 
            "title": "R in a nutshell"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#markdown-in-a-nutshell", 
            "text": "", 
            "title": "Markdown in a nutshell"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#why-combine-the-two", 
            "text": "", 
            "title": "Why combine the two?"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#r-markdown-rmarkdown", 
            "text": "Making reports with R is easy!    Combine R and markdown", 
            "title": "R + markdown == Rmarkdown"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#r-markdown-rmarkdown-cont", 
            "text": "Show R output in meaningful way    No copy / paste madness    Connect code with end goal", 
            "title": "R + markdown == Rmarkdown (cont.)"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#getting-familiar-with-rstudio", 
            "text": "", 
            "title": "Getting familiar with Rstudio"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#basic-layout", 
            "text": "Console  Files  Scripts  (Environment)", 
            "title": "Basic Layout"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#concepts", 
            "text": "Working Directory  Workspace  Knitting", 
            "title": "Concepts"
        }, 
        {
            "location": "/0-getting-started/0a-rstudio/#resources", 
            "text": "Interactive: http://tryr.codeschool.com/  More interactive: http://datacamp.com  Many links: https://www.rstudio.com/resources/training/online-learning/", 
            "title": "Resources"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/", 
            "text": "How to style an Rmarkdown document (Header 1)\n\n\nHeader 2\n\n\nHeader 3\n\n\nText\n\n\nitalic\n\n\nbold\n\n\nLists\n\n\n\n\nitem 1\n\n\n\n\nitem 2\n\n\n\n\nsubitem a\n\n\nsubitem b\n\n\n\n\n\n\n\n\nfirst item\n\n\n\n\nanother item\n\n\nsubitem a\n\n\nsubitem b\n\n\nnew item\n\n\n\n\n\n\n\n\nSeparating lines\n\n\nThese two markdown lines will be on the same line.\n\n\nSeparate new lines by pressing enter twice.\n\n\nImages\n\n\n\n\nR Code Blocks\n\n\nShow both code and outcome:\n\n\n1 + 1\n\n## [1] 2\n\n\n\nShow only outcome:\n\n\n## [1] 2\n\n\n\nDon't run code:\n\n\n1 + 1\n\n\n\nYou can make a figure wider:\n\n\nplot(1:10)\n\n\n\n\n\nOther styles you may not need\n\n\n$$ \\sqrt{x} + \\frac{y}{x} $$\n\n\nDealing with Errors\n\n\n  ```r\n  library(knitr)\n  opts_knit$set(error=TRUE)\n  ```\n\n\n\nReferences and Cheatsheets\n\n\n\n\nRmarkdown homepage\n\n\nhtml document\n    format\n\n\nusing code\n    chunks\n\n\n\n\nPDFs\n\n\n\n\ncheatsheet\n\n\nreference\n    guide", 
            "title": "Rmarkdown"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#how-to-style-an-rmarkdown-document-header-1", 
            "text": "", 
            "title": "How to style an Rmarkdown document (Header 1)"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#header-2", 
            "text": "", 
            "title": "Header 2"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#header-3", 
            "text": "", 
            "title": "Header 3"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#text", 
            "text": "italic  bold", 
            "title": "Text"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#lists", 
            "text": "item 1   item 2   subitem a  subitem b     first item   another item  subitem a  subitem b  new item", 
            "title": "Lists"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#separating-lines", 
            "text": "These two markdown lines will be on the same line.  Separate new lines by pressing enter twice.", 
            "title": "Separating lines"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#images", 
            "text": "", 
            "title": "Images"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#r-code-blocks", 
            "text": "Show both code and outcome:  1 + 1\n\n## [1] 2  Show only outcome:  ## [1] 2  Don't run code:  1 + 1  You can make a figure wider:  plot(1:10)", 
            "title": "R Code Blocks"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#other-styles-you-may-not-need", 
            "text": "$$ \\sqrt{x} + \\frac{y}{x} $$", 
            "title": "Other styles you may not need"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#dealing-with-errors", 
            "text": "```r\n  library(knitr)\n  opts_knit$set(error=TRUE)\n  ```", 
            "title": "Dealing with Errors"
        }, 
        {
            "location": "/0-getting-started/0b-rmarkdown/#references-and-cheatsheets", 
            "text": "Rmarkdown homepage  html document\n    format  using code\n    chunks   PDFs   cheatsheet  reference\n    guide", 
            "title": "References and Cheatsheets"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/", 
            "text": "Arithmetic operators\n\n\nYou can do mathematical operations in R.\n\n\n2 + 2\n\n## [1] 4\n\n10 - 2.34\n\n## [1] 7.66\n\n5 * 12\n\n## [1] 60\n\n99 / 11\n\n## [1] 9\n\n2^4\n\n## [1] 16\n\n(100 - 13) * 3^2\n\n## [1] 783\n\n\n\n\n\nSpacing is not very important.\n\n\n2    +  2\n\n## [1] 4\n\n3*4\n\n## [1] 12\n\n\n\n \n\n\nObjects and the Assignment Operator \\\n-\n\n\nIn R, you can store data, statistics, and other information in\n\nobjects\n. Objects are represented by a variable name, and are created\nby using the assignment operator \\\n-\n\n\nanumber \n- 2 + 2  # We're storing the result of 2+2 in the variable \"anumber\"\nanumber  # This will print the object.\n\n## [1] 4\n\n# Note: The # symbol begins a comment, and everything following a # will not affect your code.\n\n\n\nYou can also use = instead of \\\n- ...\n\n\nanumber = 9.123\nanumber\n\n## [1] 9.123\n\n\n\nbut it's better to use \\\n- to differentiate between assigning something\nto a variable and other uses of =, which we'll get to later. You can\nthink of the leftwards arrow as storing data \nin\n the object, rather\nthan just setting a variable equal to some value.\n\n\n \n\n\nObject Classes with class( )\n\n\nEvery object in R has a \nclass\n, or a type that describes the content\nand organization of an object.\n\n\nclass(anumber)\n\n## [1] \"numeric\"\n\n\n\nOur object 'anumber' is of the class \nnumeric\n. There are a few other\nclasses of object in R:\n\n\nalogical \n- TRUE  # This class is called \"logical\", and takes the value TRUE or FALSE\nclass(alogical)\n\n## [1] \"logical\"\n\nacharacter \n- \"data is\"  # This class is called \"character\", and holds strings of text\nclass(acharacter)\n\n## [1] \"character\"\n\nafactor \n- factor(\"A\")  # This is a class called \"factor\". It's like character, but when elements with the same text are grouped\nclass(afactor)\n\n## [1] \"factor\"\n\n\n\n... plus many other more complex classes, some of which we'll cover\nlater.\n\n\n \n\n\nChanging object classes\n\n\nSometimes you need to change the class of an object. You can \ncoerce\n\nsome object classes by using \nas.numeric()\n, \nas.logical()\n,\n\nas.character()\n, \nas.integer()\n, and \nas.factor()\n.\n\n\na \n- \"1\"\nclass(a)\n\n## [1] \"character\"\n\nas.integer(a)\n\n## [1] 1\n\nclass(as.integer(a))\n\n## [1] \"integer\"\n\nb \n- 14\nclass(b)\n\n## [1] \"numeric\"\n\nas.character(b)\n\n## [1] \"14\"\n\nclass(as.character(b))\n\n## [1] \"character\"\n\nas.factor(b)\n\n## [1] 14\n## Levels: 14\n\nclass(as.factor(b))\n\n## [1] \"factor\"\n\nc \n- 1\nd \n- 0\nclass(c)\n\n## [1] \"numeric\"\n\nclass(d)\n\n## [1] \"numeric\"\n\nas.logical(c)\n\n## [1] TRUE\n\nas.logical(d)\n\n## [1] FALSE\n\nclass(as.logical(c))\n\n## [1] \"logical\"\n\nclass(as.logical(d))\n\n## [1] \"logical\"\n\n\n\n \n\n\nCombining things with \nc()\n\n\nWe use \nc()\n to \ncombine\n or \nconcatenate\n \nelements\n (numbers,\nintegers, logical values, or character strings):\n\n\nsomenumbers \n- c(5.234, 3, 10.1, 900)\nsomelogical \n- c(TRUE, TRUE, FALSE, TRUE, FALSE)\nsomecharacter \n- c(\"Princeton\", \"Yale\", \"Harvard\", \"Penn\")\nsomefactor \n- factor(c(\"A\", \"B\", \"C\", \"B\", \"B\", \"A\"))\nsomenumbers\n\n## [1]   5.234   3.000  10.100 900.000\n\nsomelogical\n\n## [1]  TRUE  TRUE FALSE  TRUE FALSE\n\nsomecharacter\n\n## [1] \"Princeton\" \"Yale\"      \"Harvard\"   \"Penn\"\n\nsomefactor\n\n## [1] A B C B B A\n## Levels: A B C\n\n\n\nc()\n is a \nfunction\n that combines various arguments or \nelements\n\nto form a \nvector\n, a one-dimensional series of values.\n\n\n\n\nA function is like a command that takes several \narguments\n and\nreturns a result. In R, you call functions with a function name followed\nby a set of parentheses. Inside of the parentheses go what are called\narguments, which indicate various details about how the function should\noperate. In the \nc()\n function, the arguments of inside the parentheses\nafter the c are the things to be combined.\n\n\n\n\nWe've used a few other functions so far. \nclass()\n is a function that\nreturns the class of the object in parentheses. \nas.integer()\n and the\nother coercion functions change the class of the object in parentheses.\n\nfactor()\n encodes its argument as a factor.\n\n\n\n\nThere are many \nbase\n functions in R, i.e. functions that are built-in\nand ready to use. Sometimes, you might need to do something that isn't\neasily done with the base functions. In R, you can install \npackages\n,\nwhich include additional functions written by other R users. You can\ninstall packages using the \ninstall.packages()\n function, and load them\nusing \nlibrary()\n. For example, to install the psych library, use\n\ninstall.packages('psych')\n.\n\n\n\n\nThis code loads the \"psych\" package, which provides some functions that\nare useful for doing statistical analyses of experimental data.\n\n\nlibrary(psych)\n\n\n\n \n\n\nTip: Help with functions\n\n\nYou can access the help page for a function by using the ? mark. This\nwill show you information about what the function does and which\narguments you can specify. Try typing ?c into the console. ? will try to\naccess the help page for a particular command, while ?? will search the\nhelp pages.\n\n\n \n\n\nRecap: Objects, Classes, Vectors, \n Functions\n\n\nTo recap, information we work with in R is stored in \nobjects\n. Each\nobject has one or more \nclass\n (or type). Four types of \nvectors\n\n(one dimensional objects) are:\n\n\n\n\nNumeric\n: numbers with decimal values\n\n\nIntegers\n: numbers without decimal values\n\n\nLogical\n: True or False\n\n\nCharacter\n: strings of text\n\n\nFactor\n: strings of text that indicate groups, conditions, etc.\n\n\n\n\nFunctions\n are commands that execute code, and contain \narguments\n\nthat detail how to do so.\n\n\n \n\n\ndata.frames - Another kind of object\n\n\nA data.frame is another kind of object, where data are stored in a\nmatrix or table-like format. Let's try creating a simple data frame with\none row and three columns for each participant in a research study: \"id\"\ncontains a unique number to identify each participant, \"condition\"\nindicates whether each participant was assigned to condition A or\ncondition B, and \"rt\" is the reaction time in a task.\n\n\nYou'll see some new functions in the code below.\n\n\n# We use data.frame() to create a new data.frame from scratch.\nmydata \n- data.frame(id = seq(1:50),  # create a column named \"id\" with the numbers (sequence) 1 through 50\n                     condition = rep(c(\"A\", \"B\"), 25),  # create a \"condition\" column with A and B repeating\n                     rt = rnorm(n = 50, mean = 100, sd = 15))  # create a third column named \"rt\" with randomly generated data\nclass(mydata)\n\n## [1] \"data.frame\"\n\n\n\nNow we've created a data.frame with 50 rows and 3 columns. You can\nexamine the first few rows by using the head( ) function:\n\n\nhead(mydata)\n\n##   id condition        rt\n## 1  1         A  92.86635\n## 2  2         B 108.13016\n## 3  3         A  98.52080\n## 4  4         B 120.22016\n## 5  5         A  99.49950\n## 6  6         B 103.85130\n\n\n\nYou can also view the full data.frame itself by entering \"mydata\", or\nyou can view it in a table by entering \nView(mydata)\n or clicking on the\nmydata object in the Environment tab in RStudio.\n\n\nA simple way to summarize data is through the \nsummary\n function:\n\n\nsummary(mydata)\n\n##        id        condition       rt        \n##  Min.   : 1.00   A:25      Min.   : 52.78  \n##  1st Qu.:13.25   B:25      1st Qu.: 90.58  \n##  Median :25.50             Median : 98.15  \n##  Mean   :25.50             Mean   : 97.19  \n##  3rd Qu.:37.75             3rd Qu.:104.77  \n##  Max.   :50.00             Max.   :139.28\n\n\n\n \n\n\nReading data from a file\n\n\nOften, the data you want to analyze is located in a separate file. To\nwork with it in R, you need to \nread\n in the data.\n\n\n\n\nThere are a few different functions for reading data into R, depending\non the type of data file.\n\n\nmydata \n- read.csv(\"../data/training_long.csv\") # read.csv() is used for Comma Separated Value files\n#mydata \n- read.delim() # read.delim() is used when your data are separated/delimited by the TAB character\n#mydata \n- read.table()", 
            "title": "R language"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#arithmetic-operators", 
            "text": "You can do mathematical operations in R.  2 + 2\n\n## [1] 4\n\n10 - 2.34\n\n## [1] 7.66\n\n5 * 12\n\n## [1] 60\n\n99 / 11\n\n## [1] 9\n\n2^4\n\n## [1] 16\n\n(100 - 13) * 3^2\n\n## [1] 783   Spacing is not very important.  2    +  2\n\n## [1] 4\n\n3*4\n\n## [1] 12", 
            "title": "Arithmetic operators"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#objects-and-the-assignment-operator-", 
            "text": "In R, you can store data, statistics, and other information in objects . Objects are represented by a variable name, and are created\nby using the assignment operator \\ -  anumber  - 2 + 2  # We're storing the result of 2+2 in the variable \"anumber\"\nanumber  # This will print the object.\n\n## [1] 4\n\n# Note: The # symbol begins a comment, and everything following a # will not affect your code.  You can also use = instead of \\ - ...  anumber = 9.123\nanumber\n\n## [1] 9.123  but it's better to use \\ - to differentiate between assigning something\nto a variable and other uses of =, which we'll get to later. You can\nthink of the leftwards arrow as storing data  in  the object, rather\nthan just setting a variable equal to some value.", 
            "title": "Objects and the Assignment Operator \\&lt;-"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#object-classes-with-class", 
            "text": "Every object in R has a  class , or a type that describes the content\nand organization of an object.  class(anumber)\n\n## [1] \"numeric\"  Our object 'anumber' is of the class  numeric . There are a few other\nclasses of object in R:  alogical  - TRUE  # This class is called \"logical\", and takes the value TRUE or FALSE\nclass(alogical)\n\n## [1] \"logical\"\n\nacharacter  - \"data is\"  # This class is called \"character\", and holds strings of text\nclass(acharacter)\n\n## [1] \"character\"\n\nafactor  - factor(\"A\")  # This is a class called \"factor\". It's like character, but when elements with the same text are grouped\nclass(afactor)\n\n## [1] \"factor\"  ... plus many other more complex classes, some of which we'll cover\nlater.", 
            "title": "Object Classes with class( )"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#changing-object-classes", 
            "text": "Sometimes you need to change the class of an object. You can  coerce \nsome object classes by using  as.numeric() ,  as.logical() , as.character() ,  as.integer() , and  as.factor() .  a  - \"1\"\nclass(a)\n\n## [1] \"character\"\n\nas.integer(a)\n\n## [1] 1\n\nclass(as.integer(a))\n\n## [1] \"integer\"\n\nb  - 14\nclass(b)\n\n## [1] \"numeric\"\n\nas.character(b)\n\n## [1] \"14\"\n\nclass(as.character(b))\n\n## [1] \"character\"\n\nas.factor(b)\n\n## [1] 14\n## Levels: 14\n\nclass(as.factor(b))\n\n## [1] \"factor\"\n\nc  - 1\nd  - 0\nclass(c)\n\n## [1] \"numeric\"\n\nclass(d)\n\n## [1] \"numeric\"\n\nas.logical(c)\n\n## [1] TRUE\n\nas.logical(d)\n\n## [1] FALSE\n\nclass(as.logical(c))\n\n## [1] \"logical\"\n\nclass(as.logical(d))\n\n## [1] \"logical\"", 
            "title": "Changing object classes"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#combining-things-with-c", 
            "text": "We use  c()  to  combine  or  concatenate   elements  (numbers,\nintegers, logical values, or character strings):  somenumbers  - c(5.234, 3, 10.1, 900)\nsomelogical  - c(TRUE, TRUE, FALSE, TRUE, FALSE)\nsomecharacter  - c(\"Princeton\", \"Yale\", \"Harvard\", \"Penn\")\nsomefactor  - factor(c(\"A\", \"B\", \"C\", \"B\", \"B\", \"A\"))\nsomenumbers\n\n## [1]   5.234   3.000  10.100 900.000\n\nsomelogical\n\n## [1]  TRUE  TRUE FALSE  TRUE FALSE\n\nsomecharacter\n\n## [1] \"Princeton\" \"Yale\"      \"Harvard\"   \"Penn\"\n\nsomefactor\n\n## [1] A B C B B A\n## Levels: A B C  c()  is a  function  that combines various arguments or  elements \nto form a  vector , a one-dimensional series of values.   A function is like a command that takes several  arguments  and\nreturns a result. In R, you call functions with a function name followed\nby a set of parentheses. Inside of the parentheses go what are called\narguments, which indicate various details about how the function should\noperate. In the  c()  function, the arguments of inside the parentheses\nafter the c are the things to be combined.   We've used a few other functions so far.  class()  is a function that\nreturns the class of the object in parentheses.  as.integer()  and the\nother coercion functions change the class of the object in parentheses. factor()  encodes its argument as a factor.   There are many  base  functions in R, i.e. functions that are built-in\nand ready to use. Sometimes, you might need to do something that isn't\neasily done with the base functions. In R, you can install  packages ,\nwhich include additional functions written by other R users. You can\ninstall packages using the  install.packages()  function, and load them\nusing  library() . For example, to install the psych library, use install.packages('psych') .   This code loads the \"psych\" package, which provides some functions that\nare useful for doing statistical analyses of experimental data.  library(psych)", 
            "title": "Combining things with c()"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#tip-help-with-functions", 
            "text": "You can access the help page for a function by using the ? mark. This\nwill show you information about what the function does and which\narguments you can specify. Try typing ?c into the console. ? will try to\naccess the help page for a particular command, while ?? will search the\nhelp pages.", 
            "title": "Tip: Help with functions"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#recap-objects-classes-vectors-functions", 
            "text": "To recap, information we work with in R is stored in  objects . Each\nobject has one or more  class  (or type). Four types of  vectors \n(one dimensional objects) are:   Numeric : numbers with decimal values  Integers : numbers without decimal values  Logical : True or False  Character : strings of text  Factor : strings of text that indicate groups, conditions, etc.   Functions  are commands that execute code, and contain  arguments \nthat detail how to do so.", 
            "title": "Recap: Objects, Classes, Vectors, &amp; Functions"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#dataframes-another-kind-of-object", 
            "text": "A data.frame is another kind of object, where data are stored in a\nmatrix or table-like format. Let's try creating a simple data frame with\none row and three columns for each participant in a research study: \"id\"\ncontains a unique number to identify each participant, \"condition\"\nindicates whether each participant was assigned to condition A or\ncondition B, and \"rt\" is the reaction time in a task.  You'll see some new functions in the code below.  # We use data.frame() to create a new data.frame from scratch.\nmydata  - data.frame(id = seq(1:50),  # create a column named \"id\" with the numbers (sequence) 1 through 50\n                     condition = rep(c(\"A\", \"B\"), 25),  # create a \"condition\" column with A and B repeating\n                     rt = rnorm(n = 50, mean = 100, sd = 15))  # create a third column named \"rt\" with randomly generated data\nclass(mydata)\n\n## [1] \"data.frame\"  Now we've created a data.frame with 50 rows and 3 columns. You can\nexamine the first few rows by using the head( ) function:  head(mydata)\n\n##   id condition        rt\n## 1  1         A  92.86635\n## 2  2         B 108.13016\n## 3  3         A  98.52080\n## 4  4         B 120.22016\n## 5  5         A  99.49950\n## 6  6         B 103.85130  You can also view the full data.frame itself by entering \"mydata\", or\nyou can view it in a table by entering  View(mydata)  or clicking on the\nmydata object in the Environment tab in RStudio.  A simple way to summarize data is through the  summary  function:  summary(mydata)\n\n##        id        condition       rt        \n##  Min.   : 1.00   A:25      Min.   : 52.78  \n##  1st Qu.:13.25   B:25      1st Qu.: 90.58  \n##  Median :25.50             Median : 98.15  \n##  Mean   :25.50             Mean   : 97.19  \n##  3rd Qu.:37.75             3rd Qu.:104.77  \n##  Max.   :50.00             Max.   :139.28", 
            "title": "data.frames - Another kind of object"
        }, 
        {
            "location": "/0-getting-started/0c-rbasics/#reading-data-from-a-file", 
            "text": "Often, the data you want to analyze is located in a separate file. To\nwork with it in R, you need to  read  in the data.   There are a few different functions for reading data into R, depending\non the type of data file.  mydata  - read.csv(\"../data/training_long.csv\") # read.csv() is used for Comma Separated Value files\n#mydata  - read.delim() # read.delim() is used when your data are separated/delimited by the TAB character\n#mydata  - read.table()", 
            "title": "Reading data from a file"
        }
    ]
}